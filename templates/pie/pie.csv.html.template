<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

</style>
<body>
<script src="d3.v3.js"></script>
<script>
height

var margin = {top: 20, right: 20, bottom: 30, left: 50},
    graphlegend = {width: ||PLACEHOLDER_LEGEND_WIDTH||, height: 20},
    header = {height: 50},
    width = ||PLACEHOLDER_WIDTH|| - margin.left - margin.right,
    chartwidth = width - graphlegend.width,
    height = ||PLACEHOLDER_HEIGHT|| - margin.top - margin.bottom,
    chartheight = height - header.height
    radius = (Math.min(width-graphlegend.width-50, height)) / 2;


var color = ||PLACEHOLDER_SCALE||

var yLegend = d3.scale.ordinal();

var pie = d3.layout.pie()
    .sort(null)
    .value(function(d) { return d.value; });

var arc = d3.svg.arc()
    .innerRadius(radius - 100)
    .outerRadius(radius - 20);

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + chartwidth / 2 + "," + chartheight / 2 + ")");

function sortByValueAsc(a,b) {
        if (parseFloat(a.value) < parseFloat(b.value))
                return -1;
        if (parseFloat(a.value) > parseFloat(b.value))
                return 1;
        return 0;
}
                
function sortByValueDsc(b,a) {
        if (parseFloat(a.value) < parseFloat(b.value))
                return -1;
        if (parseFloat(a.value) > parseFloat(b.value))
                return 1;
        return 0;
}

function sortByNameAsc(a,b) {
        if (a.name.toUpperCase() < b.name.toUpperCase())
                return -1;
        if (a.name.toUpperCase() >  b.name.toUpperCase())
                return 1;
        return 0;
}

function sortByNameDsc(b,a) {
        if (a.name.toUpperCase() < b.name.toUpperCase())
                return -1;
        if (a.name.toUpperCase() > b.name.toUpperCase())
                return 1;
        return 0;
}

d3.csv("||PLACEHOLDER_DATAFILE||", function(error,data) {

  ||PLACEHOLDER_ENABLE_SORT||data.sort(||PLACEHOLDER_SORTTYPE||);
  ||PLACEHOLDER_ENABLE_TRUNCATE||data = data.slice(0,||PLACEHOLDER_MAXRESULTS||);

  namevalues = [];

  data.forEach(function(d) {
    namevalues.push(d.name);
  });

  yLegend.domain(namevalues);
  yLegend.rangeBands([0,data.length * graphlegend.height]);
  yLegendStart = (data.length * graphlegend.height / 2 * -1) ;

  var g = svg.selectAll(".arc")
      .data(pie(data))
    .enter().append("g")
      .attr("class", "arc");

  g.append("path")
      .attr("d", arc)
      .style("fill", function(d) { return color(d.data.name); });

  g.append("g")
    .attr("id", "header")
    .append("text")
    .attr("x", radius * -1 + 5)
    .attr("y", radius * -1 - 35 )
    .style("font-size", "20px")
    .text("||PLACEHOLDER_HEADER||");

  var legend = svg.append('g')
      .attr('id', 'legend');
  
  legend.selectAll('text')
      .data(data)
    .enter().append("text")
      .attr("x",  radius + 25)
      .attr("y", function(d) { return yLegend(d.name) + yLegendStart })
      .attr('class', 'legend')
      .text(function(d) { return d.name; })
  legend.selectAll('circle')
      .data(data)
    .enter().append("circle")
      .attr('fill', function(d) { return color(d.name); })
      .attr('cx', radius + 10)
      .attr('cy', function(d) { return yLegend(d.name) -3 + yLegendStart} )
      .attr('r',5);

});

</script>

<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}


.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>
<body>
<script src="d3.v3.js"></script>
<script>

var margin = {top: 20, right: 20, bottom: 30, left: 50},
    graphlegend = {width: 150, height: 20},
    header = {height: 50},
    width = ||PLACEHOLDER_WIDTH|| - margin.left - margin.right,
    chartwidth = width - graphlegend.width,
    height = ||PLACEHOLDER_HEIGHT|| - margin.top - margin.bottom
    chartheight = height - header.height;

var parseDate = d3.time.format("||PLACEHOLDER_DATEFORMAT||").parse;

var x = d3.time.scale()
    .range([0, chartwidth]);

var y = d3.scale.linear()
    .range([chartheight, 0]);

var color = ||PLACEHOLDER_SCALE||

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var yLabel = d3.scale.ordinal()


var line = d3.svg.line()
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.value); });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + (margin.top + header.height) + ")");

var names = [];
var dataArray = {};
d3.csv("||PLACEHOLDER_DATAFILE||", function(error, data) {

  data.forEach(function(d) {
    d.date = parseDate(d.date);
    d.value = +d.value;
    var exists = false;
    for (var j = 0, k = names.length; j < k; j++) {
        if (names[j] == d.name) exists = true;
    }
    if (!exists) { 
        names.push(d.name);
        tmpArray = [];
        tmpArray.push({date: d.date, value: d.value});
        dataArray[d.name] = tmpArray;
    } else { 
        tmpArray = dataArray[d.name];
        tmpArray.push({date: d.date, value: d.value});
    }
        
  });

  color.domain(names);

  var datasets= color.domain().map(function(name) {
    return { 
        name: name,
        values: dataArray[name]
    }
  });

  x.domain([
	d3.min(datasets, function(c) { return d3.min(c.values, function (v) { return v.date; }); }),
	d3.max(datasets, function(c) { return d3.max(c.values, function (v) { return v.date; }); })
  ]);
  y.domain([
	d3.min(datasets, function(c) { return d3.min(c.values, function (v) { return v.value; }); }),
	d3.max(datasets, function(c) { return d3.max(c.values, function (v) { return v.value; }); })
  ]);

  yLabel.domain(names);
  yLabel.rangeBands([0,names.length * graphlegend.height]);
  yLabelStart = chartheight/2 - names.length + graphlegend.height;

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + (chartheight) + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Volume");

  svg.append("g")
    .attr("id", "header")
    .attr("width", width)
    .attr('class', 'header')
    .append("text")
    .attr("x", 5)
    .attr("y", -25)
    .style("font-size", "20px")
    .text("||PLACEHOLDER_HEADER||");

  legend = svg.append('g')
    .attr('id','legend');

  var dataset= svg.selectAll(".dataset")
      .data(datasets)
    .enter().append("g")
      .attr("class", "dataset");

  dataset.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return color(d.name); });

  legend.selectAll('text')
      .data(datasets)
    .enter().append("text")
      .attr("x",chartwidth + 25)
      .attr("y", function(d) { return yLabel(d.name) + yLabelStart})
      .attr('class', 'legend')
      .text(function(d) { return d.name; })
  legend.selectAll('circle')
      .data(datasets)
    .enter().append("circle")
      .attr('fill', function(d) { return color(d.name); })
      .attr('cx', chartwidth + 10)
      .attr('cy', function(d) { return yLabel(d.name) -3 + yLabelStart} )
      .attr('r',5);
});

</script>
